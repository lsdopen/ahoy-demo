applications:
  microservicesdemoemailservice:
    configs: {
      }
    environmentVariables:
      DISABLE_PROFILER:
        key: DISABLE_PROFILER
        type: Value
        value: '1'
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
    name: microservices-demo-emailservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 8080
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemocheckoutservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '5050'
      PRODUCT_CATALOG_SERVICE_ADDR:
        key: PRODUCT_CATALOG_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-productcatalogservice:3550
      SHIPPING_SERVICE_ADDR:
        key: SHIPPING_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-shippingservice:50051
      PAYMENT_SERVICE_ADDR:
        key: PAYMENT_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-paymentservice:50051
      CURRENCY_SERVICE_ADDR:
        key: CURRENCY_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-currencyservice:7000
      CART_SERVICE_ADDR:
        key: CART_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-cartservice:7070
      EMAIL_SERVICE_ADDR:
        key: EMAIL_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-emailservice:8080
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
    name: microservices-demo-checkoutservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 5050
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemorecommendationservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '8080'
      PRODUCT_CATALOG_SERVICE_ADDR:
        key: PRODUCT_CATALOG_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-productcatalogservice:3550
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
    name: microservices-demo-recommendationservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 8080
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemofrontend:
    configs: {
      }
    environmentVariables:
      PRODUCT_CATALOG_SERVICE_ADDR:
        key: PRODUCT_CATALOG_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-productcatalogservice:3550
      CURRENCY_SERVICE_ADDR:
        key: CURRENCY_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-currencyservice:7000
      CART_SERVICE_ADDR:
        key: CART_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-cartservice:7070
      RECOMMENDATION_SERVICE_ADDR:
        key: RECOMMENDATION_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-recommendationservice:8080
      SHIPPING_SERVICE_ADDR:
        key: SHIPPING_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-shippingservice:50051
      CHECKOUT_SERVICE_ADDR:
        key: CHECKOUT_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-checkoutservice:5050
      AD_SERVICE_ADDR:
        key: AD_SERVICE_ADDR
        type: Value
        value: online-boutique-microservices-demo-adservice:9555
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
    name: microservices-demo-frontend
    replicas: 1
    routeHostname: online-boutique-tst.ahoy.cluster-02.lsdopen.io
    routeTargetPort: 8080
    secrets: {
      }
    servicePorts:
    - 8080
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemopaymentservice:
    configs: {
      }
    environmentVariables: {
      }
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
    name: microservices-demo-paymentservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 50051
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemoproductcatalogservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '3550'
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
    name: microservices-demo-productcatalogservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 3550
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemocartservice:
    configs: {
      }
    environmentVariables:
      REDIS_ADDR:
        key: REDIS_ADDR
        type: Value
        value: online-boutique-redis:6379
    healthEndpointPath: /heathz
    healthEndpointPort: 7070
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
    name: microservices-demo-cartservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 7070
    tls: false
    version: v0.2.4
    volumes: {
      }
  microservicesdemocurrencyservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '7000'
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
    name: microservices-demo-currencyservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 7000
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemoshippingservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '50051'
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
    name: microservices-demo-shippingservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 50051
    tls: false
    version: v0.2.3
    volumes: {
      }
  microservicesdemoadservice:
    configs: {
      }
    environmentVariables:
      PORT:
        key: PORT
        type: Value
        value: '9555'
    healthEndpointScheme: HTTP
    image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
    name: microservices-demo-adservice
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 9555
    tls: false
    version: v0.2.3
    volumes: {
      }
  redis:
    configs: {
      }
    dockerConfigJson: AgCIUt3wiJLES4vMbiL1NTQaww7qxdpoGF4P0HP10JSxCM430Y0i8GEMmzQ8kdsSY8QRTkZ+OUUGEBq3cQ1703uZByDQRiTCft3+3Oghvbt7KJgFSZJW5752Y9CHUSbjPBuAsDTEE1KWPl7zXpWBhakYxikm5ED68wkpBOiypX3j/mqOfSUShPpw9m+2FZ0eMc1Xgviy64YrPVKgWVI6JFbv7KqHU3wd7fbKh3ZbOfzqw80hXyZo6HABAstJf07uzZIF0FnZHC5HI/7/eGS8yzxAXY8tUmGfeLtom2wfNtbpr8RqWrt0FaEVLDvWKwrLllhsGXH5HYTJ3b1DGu+1UrllFMfSGh/iq+4KcEISACoAVpqfHL63y0R6TCk1Q3GhJ4CqLzKEmanS1JKeUqcsjF36MmVS3qZysIdvskp2Ih+Jl4+ALZ0iGKg6ZrkxdkFSqBAycs5gLFokhYxgUMlTe+bOEkwe5SkiWzUUIDPCv9OICSOhNilUNcnVlJUce5C2vUQYzk/4knUpK5owXqNRnTyNQ6zYO5EgbdxejBzdPdQ4zVAEojYZ9GeGyP46qlzXuVFwVnP6oT5isPtmAfH2u2KA4rvnEVLI59asFQPJEbjoM3r0Y51exa/vYf722eIdZfLIjHXdp6BFJPbl2Dm1b+qcHJu0NkPJCCZ1krpb1aNiOIcb6XX1lj3JzHTBm1m+M6y/on9clWFG4IAejTSJUO/ftUW/nbL003cd4Ef5BZpnov0eQJ9PNfEWEQdTruLTaPlT17jZeIvOZXgvlPbCiGTxIYddSaUdtPW79A1+xcIiixesqNHNQ0b8by+CLb6AkGQjkylGZfWCZxy3DYSnXiBr4CylSw==
    environmentVariables: {
      }
    healthEndpointScheme: HTTP
    image: docker.io/redis:alpine
    name: redis
    replicas: 1
    secrets: {
      }
    servicePorts:
    - 6379
    tls: false
    version: alpine
    volumes:
      redis-data:
        accessMode: ReadWriteOnce
        mountPath: /data
        name: redis-data
        size: 1Gi
        storageClassName: standard
        type: PersistentVolume
environment: tst
host: ahoy.cluster-02.lsdopen.io
releaseName: online-boutique
releaseVersion: '1.8'
